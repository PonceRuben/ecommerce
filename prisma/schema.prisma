generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permission {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  roles Role_Permission[]
}

model Role_Permission {
  id          Int        @id @default(autoincrement())
  roleId      Int
  permissionId Int

  role        Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  users       User_Role[]
  permissions Role_Permission[]
}

model User_Role {
  id        Int    @id @default(autoincrement())
  userId    Int
  roleId    Int
  user      User   @relation(fields: [userId], references: [id])
  role      Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  username      String?        @unique
  email         String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  roles         User_Role[]
  orders        Order[]
  addresses     Address[]
}

model Account {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Verification_Token {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         Int     @id @default(autoincrement())
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  products Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  image       String?
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  orderItems  Order_Item[] 
}

model Order {
  id            Int       @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  status        String    // Puede ser 'pendiente', 'enviado', 'entregado', etc.
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])

  orderItems    Order_Item[]
}

model Order_Item {
  id          Int       @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  unitPrice   Float

  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Esto asegura que un producto solo pueda aparecer una vez por pedido
}

model Address {
  id          Int       @id @default(autoincrement())
  userId      Int
  line1       String
  line2       String?
  city        String
  postalCode  String
  country     String
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId])
}
